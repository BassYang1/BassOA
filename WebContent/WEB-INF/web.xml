<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>OA</display-name>
	<description></description>
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext-spring.xml,classpath:applicationContext-myBatis.xml</param-value>
	</context-param>

	<!-- Spring IoC/DI配置 -->
	<!-- Spring监听器: 在启动Web容器时，自动装配Spring applicationContext.xml 的配置信息 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- 此监听器主要用于解决java.beans.Introspector导致的内存泄漏的问题 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
		
	<!-- Request监听器 -->
	<!-- 
		在Spring2.0中除了以前的Singleton和Prototype外又加入了三个新的web作用域，分别为request、session和global session，如果你想让你的容器里的某个bean拥有其中某种新的web作用域，
		除了在bean级上配置相应的scope属性，还必须在容器级做一个额外的初始化配置。 
	-->
	<listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>
	
	<!-- Spring Web配置 -->
	
</web-app>